name: CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven dependencies
        run: mvn install

      - name: Build
        run: mvn --batch-mode --update-snapshots verify

  test:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn --batch-mode --update-snapshots test

  quality-check:
    runs-on: ubuntu-latest

    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Quality Check with Checkstyle
        run: mvn checkstyle:check

      - name: Archive Checkstyle XML Report
        uses: actions/upload-artifact@v2
        with:
          name: checkstyle-report
          path: target/site/checkstyle-result.xml

  docker-build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

       # https://github.com/marketplace/actions/push-to-ghcr
      - name: Build and publish a Docker image for ${{ github.repository }}
        uses: macbre/push-to-ghcr@master
        with:
          image_name: ${{ github.repository }}  # it will be lowercased internally
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-files
          path: |
            docker
            docker-compose.yml


  deploy-to-vps:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - docker-build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-files
          path: .
#      - name: Nettoyage des anciennes images
#        uses: cross-the-world/ssh-pipeline@v1.2.0
#        with:
#          host: ${{ secrets.SSH_HOST}}
#          # ssh remote port
#          port: ${{ secrets.SSH_PORT}}
#          # ssh remote user
#          user: ${{ secrets.SSH_USER}}
#          # ssh remote password
#          pass: ${{ secrets.SSH_PASSWORD}}
#          # execute commands on ssh
#          script: docker images --format "{{.ID}} {{.Repository}}:{{.Tag}}" | awk '/cteillet\/parcelle/ {print $1}' | grep -v "$(docker ps -q | xargs docker inspect --format '{{.Image}}')" | xargs docker rmi

      - name: Nettoyage du dossier docker
        uses: cross-the-world/ssh-pipeline@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST}}
          # ssh remote port
          port: ${{ secrets.SSH_PORT}}
          # ssh remote user
          user: ${{ secrets.SSH_USER}}
          # ssh remote password
          pass: ${{ secrets.SSH_PASSWORD}}
          # execute commands on ssh
          script: rm -rf /home/${{ secrets.SSH_USER}}/docker

      - name: Docker Compose Down
        uses: cross-the-world/ssh-pipeline@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST}}
          # ssh remote port
          port: ${{ secrets.SSH_PORT}}
          # ssh remote user
          user: ${{ secrets.SSH_USER}}
          # ssh remote password
          pass: ${{ secrets.SSH_PASSWORD}}
          # execute commands on ssh
          script: docker compose down

      - name: Transfer docker repository to VPS
        uses: Creepios/sftp-action@v1.0.5
        with:
          # Host to log in
          host: ${{ secrets.SSH_HOST}}
          # Port to log in
          port: ${{ secrets.SSH_PORT}}
          # Username to log in
          username: ${{ secrets.SSH_USER}}
           # Passwort to log in
          password: ${{ secrets.SSH_PASSWORD}}
          # Local file or directory
          localPath: docker
          # Remote file or directory path (file or directories will be created)
          remotePath: docker/

      - name: Transfer docker-compose.yml to VPS
        uses: Creepios/sftp-action@v1.0.5
        with:
          # Host to log in
          host: ${{ secrets.SSH_HOST}}
          # Port to log in
          port: ${{ secrets.SSH_PORT}}
          # Username to log in
          username: ${{ secrets.SSH_USER}}
          # Passwort to log in
          password: ${{ secrets.SSH_PASSWORD}}
          # Local file or directory
          localPath: docker-compose.yml
          # Remote file or directory path (file or directories will be created)
          remotePath: docker-compose.yml

      - name: Suppression de l'ancienne image
        uses: cross-the-world/ssh-pipeline@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST}}
          # ssh remote port
          port: ${{ secrets.SSH_PORT}}
          # ssh remote user
          user: ${{ secrets.SSH_USER}}
          # ssh remote password
          pass: ${{ secrets.SSH_PASSWORD}}
          # execute commands on ssh
          script: docker rmi ghcr.io/cteillet/parcelle-back

      - name: Docker Compose Up
        uses: cross-the-world/ssh-pipeline@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST}}
          # ssh remote port
          port: ${{ secrets.SSH_PORT}}
          # ssh remote user
          user: ${{ secrets.SSH_USER}}
          # ssh remote password
          pass: ${{ secrets.SSH_PASSWORD}}
          # execute commands on ssh
          script: docker login ghcr.io -u cteillet -p ${{ secrets.GITHUB_TOKEN }} && docker compose -f /home/${{ secrets.SSH_USER}}/docker-compose.yml up -d

      - name: Cleanup
        run: |
          rm -f parcelle_${{ github.run_number }}.tar
          # Ajoutez d'autres commandes de nettoyage au besoin
      - name: Delete Artifact
        uses: GeekyEggo/delete-artifact@v2.0.0
        with:
          name: docker-files
