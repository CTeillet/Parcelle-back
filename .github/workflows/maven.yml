name: CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven dependencies
        run: mvn install

      - name: Build
        run: mvn --batch-mode --update-snapshots verify

  test:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn --batch-mode --update-snapshots test

  quality-check:
    runs-on: ubuntu-latest

    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Quality Check with Checkstyle
        run: mvn checkstyle:check

      - name: Archive Checkstyle XML Report
        uses: actions/upload-artifact@v2
        with:
          name: checkstyle-report
          path: target/site/checkstyle-result.xml

  docker-build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Update system packages
        run: sudo apt-get update && sudo apt-get upgrade -y

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          push: false
          tags: cteillet/parcelle:${{ github.run_number }}
          load: true

      - name: List docker images
        run: |
          docker images

      # Slim the Image
      - name: Slim Docker image
        uses: kitabisa/docker-slim-action@v1
        env:
          DSLIM_HTTP_PROBE: false
        with:
          target: cteillet/parcelle:${{ github.run_number }}
          tag: "${{ github.run_number }}-slim"

      - name: Save Docker image
        run: |
          docker save -o parcelle_${{ github.run_number }}.tar cteillet/parcelle:${{ github.run_number }}-slim

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: parcelle_${{ github.run_number }}.tar

  deploy-to-vps:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - docker-build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image
          path: .

      - name: Nettoyage du dossier docker-images
        uses: cross-the-world/ssh-pipeline@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST}}
          # ssh remote port
          port: ${{ secrets.SSH_PORT}}
          # ssh remote user
          user: ${{ secrets.SSH_USER}}
          # ssh remote password
          pass: ${{ secrets.SSH_PASSWORD}}
          # execute commands on ssh
          script: rm -rf /home/${{ secrets.SSH_USER}}/docker-images/*

      - name: Transfer docker images to VPS
        uses: Creepios/sftp-action@v1.0.5
        with:
          # Host to login
          host: ${{ secrets.SSH_HOST}}
          # Port to login
          port: ${{ secrets.SSH_PORT}}
          # Username to login
          username: ${{ secrets.SSH_USER}}
           # Passwort to login
          password: ${{ secrets.SSH_PASSWORD}}
          # Local file or directory
          localPath: parcelle_${{ github.run_number }}.tar
          # Remote file or directory path (file or directories will be created)
          remotePath: docker-images/

      - name: SSH into VPS and load Docker image
        uses: cross-the-world/ssh-pipeline@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST}}
          # ssh remote port
          port: ${{ secrets.SSH_PORT}}
          # ssh remote user
          user: ${{ secrets.SSH_USER}}
          # ssh remote password
          pass: ${{ secrets.SSH_PASSWORD}}
          # execute commands on ssh
          script: docker load -i /home/${{ secrets.SSH_USER}}/docker-images/parcelle_${{ github.run_number }}.tar

      - name: SSH into VPS and restart Docker container
        uses: cross-the-world/ssh-pipeline@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST}}
          # ssh remote port
          port: ${{ secrets.SSH_PORT}}
          # ssh remote user
          user: ${{ secrets.SSH_USER}}
          # ssh remote password
          pass: ${{ secrets.SSH_PASSWORD}}
          # execute commands on ssh
          script: docker stop parcelle || true && docker rm parcelle || true && docker run -d -p 8080:8080 --name parcelle -e JASYPT_PASSWORD='${{ secrets.JASYPT_PASSWORD}}' -v /app/logs:/home/deploiement-parcelle/logs cteillet/parcelle:${{ github.run_number }}

      - name: Cleanup
        run: |
          rm -f parcelle_${{ github.run_number }}.tar
          # Ajoutez d'autres commandes de nettoyage au besoin
