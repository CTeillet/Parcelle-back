name: CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven dependencies
        run: mvn install

      - name: Build
        run: mvn --batch-mode --update-snapshots verify

  test:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn --batch-mode --update-snapshots test

  quality-check:
    runs-on: ubuntu-latest

    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Quality Check with Checkstyle
        run: mvn checkstyle:check

  docker-build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Update system packages
        run: sudo apt-get update && sudo apt-get upgrade -y

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t cteillet/parcelle:${{ github.run_number }} .
          docker save -o parcelle_${{ github.run_number }}.tar cteillet/parcelle:${{ github.run_number }}

  deploy-to-vps:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - docker-build

    steps:
      - name: Copy Docker image to VPS
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -i ~/.ssh/id_rsa parcelle_${{ github.run_number }}.tar ${{ secrets.SSH_USER}}@${{ secrets.SSH_HOST}}:/home/${{ secrets.SSH_USER}}/docker-images/

      - name: SSH into VPS and load Docker image
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER}}@${{ secrets.SSH_HOST}} "docker load -i /home/${{ secrets.SSH_USER}}/docker-images/parcelle_${{ github.run_number }}.tar"

      - name: SSH into VPS and restart Docker container
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER}}@${{ secrets.SSH_HOST}} "docker stop parcelle || true && docker rm parcelle || true && docker run -d -p 8080:8080 --name parcelle cteillet/parcelle:${{ github.run_number }}"

      - name: Cleanup
        run: |
          rm -f parcelle_${{ github.run_number }}.tar
          # Ajoutez d'autres commandes de nettoyage au besoin
